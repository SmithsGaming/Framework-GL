OpenGL 1.X
========================================
  - You must choose withOpenGL33ProfileCompatibility() in your Configuration.
  - This is the default mode for Graphics.
  - Shaders cannot be used. The bind state uses glEnableClientState and gl*Pointer calls.
  - You can render objects using Display Lists, Immediate Mode, Vertex Arrays and VBOs.
  - You must not attach any shaders to a mesh material.

OpenGL 2.1
========================================
  - You must choose withOpenGL33ProfileCompatibility() in your Configuration.
  - You need to enable the correct renderer and renderable factory with Fw.graphics.switchRenderableFactoryAndRenderer(2).
  - You must render all objects with a shader.
  - You can render objects using Display Lists, Immediate Mode, Vertex Arrays and VBOs.
  - You must use the matrix helper instead of OpenGL matrix functions.

OpenGL 3.2
========================================
  - You must choose withOpenGL32ProfileCore() in your Configuration.
  - You need to enable the correct renderer and renderable factory with Fw.graphics.switchRenderableFactoryAndRenderer(3).
  - There are no built-in shaders for this version.
  - You must render all objects with a shader.
  - You can render objects using Vertex Arrays and VAOs.
  - You must use the matrix helper instead of OpenGL matrix functions.

OpenGL 3.3
========================================
  - You must choose withOpenGL33ProfileCore() in your Configuration.
  - You need to enable the correct renderer and renderable factory with Fw.graphics.switchRenderableFactoryAndRenderer(3).
  - You must render all objects with a shader.
  - You can render objects using Vertex Arrays and VAOs.
  - You must use the matrix helper instead of OpenGL matrix functions.

Shaders
========================================
  - GLSL 120, 150 & 330 shaders do not rely on built-in attributes, uniforms and variables.
  - All shaders reference a global DefaultAttribLocations by default for locating vertex attributes and must be consistent across all shaders. The bind state uses this information to enable/disable the correct vertex attributes.
  - If you make changes to the global DefaultAttribLocations then you must update the bind state.
  - Vertex lit shaders emulate glEnable(GL_COLOR_MATERIAL) and glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE) by default.

Textures
========================================
  - Textures attached to a mesh material have a texture type (defined in net.smert.frameworkgl.opengl.TextureType) and each type has to be mapped to a texture unit (GL_TEXTURE0). This is mapped on a per shader basis.